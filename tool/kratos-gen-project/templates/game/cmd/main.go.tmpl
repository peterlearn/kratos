package main

import (
	"flag"
	"os"
	"os/signal"
	"syscall"
	"time"

	"{{.ModPrefix}}{{.Name}}/internal/di"
	"gitlab.com/firerocksg/xy3-kratos/pkg/conf/paladin"
	"gitlab.com/firerocksg/xy3-kratos/pkg/conf/paladin/apollo"
	"gitlab.com/firerocksg/xy3-kratos/pkg/log"
    //"gitlab.com/firerocksg/xy3-kratos/pkg/naming/kubernetes"
    //"gitlab.com/firerocksg/xy3-kratos/pkg/net/rpc/warden/resolver"
)

func main() {
	flag.Parse()
	var err error
    if err = paladin.Init(apollo.PaladinDriverApollo); err != nil {
        panic(err)
    }
	log.Init(nil) // debug flag: log.dir={path}
	defer log.Close()
	log.Info("{{.Name}} start")

	//resolver.Register(kubernetes.Builder())

	_, closeFunc, err := di.InitApp()
	if err != nil {
		panic(err)
	}
	c := make(chan os.Signal, 1)
	signal.Notify(c, syscall.SIGHUP, syscall.SIGQUIT, syscall.SIGTERM, syscall.SIGINT)
	for {
		s := <-c
		log.Info("get a signal %s", s.String())
		switch s {
		case syscall.SIGQUIT, syscall.SIGTERM, syscall.SIGINT:
			closeFunc()
			log.Info("{{.Name}} exit")
			time.Sleep(time.Second)
			return
		case syscall.SIGHUP:
		default:
			return
		}
	}
}
